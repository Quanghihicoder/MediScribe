version: "3.8"

services:
  frontend:
    container_name: mediscribe-frontend
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - ./frontend/.env:/app/.env
      - /app/node_modules
    working_dir: /app
    command: npm run dev -- --host
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  backend:
    container_name: mediscribe-backend
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    working_dir: /app
    command: npm start
    env_file:
      - ./backend/.env
    depends_on:
      - kafka-setup

  zookeeper:
    container_name: mediscribe-zookeeper
    image: confluentinc/cp-zookeeper:7.8.0    
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka:
    container_name: mediscribe-kafka
    image: confluentinc/cp-kafka:7.8.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    depends_on:
      - zookeeper

  kafka-setup:
    container_name: mediscribe-kafka-setup
    image: confluentinc/cp-kafka:7.8.0
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      echo 'Waiting for Kafka to be ready...' &&
      cub kafka-ready -b kafka:9092 1 20 &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic audio.send &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic transcription.data &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic summary.results &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic transcription.results
      "
    restart: "no"
    depends_on:
      - kafka

  transcriber:
    container_name: mediscribe-transcriber
    build: ./worker/transcriber
    restart: always
    command: >
      sh -c "
        until nc -z kafka 9092; do
          echo 'Waiting for Kafka...';
          sleep 1;
        done;
        echo 'Running Python...';
        python -u app.py
      "
    depends_on:
      - kafka-setup

  summarizer:
    container_name: mediscribe-summarizer
    build: ./worker/summarizer
    restart: always
    command: >
      sh -c "
        until nc -z kafka 9092; do
          echo 'Waiting for Kafka...';
          sleep 1;
        done;
        echo 'Running Python...';
        python -u app.py
      "
    depends_on:
      - kafka-setup
